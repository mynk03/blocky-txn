// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/harbor/api.proto

package harbor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HarborAPI_CreateBlock_FullMethodName   = "/proto.harbor.HarborAPI/CreateBlock"
	HarborAPI_ValidateBlock_FullMethodName = "/proto.harbor.HarborAPI/ValidateBlock"
)

// HarborAPIClient is the client API for HarborAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HarborAPI defines the interface between consensus and execution clients
// This is similar to Ethereum's ENGINE API, providing a standardized way for the
// consensus layer to communicate with the execution layer
type HarborAPIClient interface {
	// CreateBlock instructs the execution client to create a new block from its transaction pool
	CreateBlock(ctx context.Context, in *BlockCreationRequest, opts ...grpc.CallOption) (*BlockCreationResponse, error)
	// ValidateBlock validates a block and its transactions
	ValidateBlock(ctx context.Context, in *BlockValidationRequest, opts ...grpc.CallOption) (*ValidationResult, error)
}

type harborAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHarborAPIClient(cc grpc.ClientConnInterface) HarborAPIClient {
	return &harborAPIClient{cc}
}

func (c *harborAPIClient) CreateBlock(ctx context.Context, in *BlockCreationRequest, opts ...grpc.CallOption) (*BlockCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockCreationResponse)
	err := c.cc.Invoke(ctx, HarborAPI_CreateBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harborAPIClient) ValidateBlock(ctx context.Context, in *BlockValidationRequest, opts ...grpc.CallOption) (*ValidationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResult)
	err := c.cc.Invoke(ctx, HarborAPI_ValidateBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HarborAPIServer is the server API for HarborAPI service.
// All implementations must embed UnimplementedHarborAPIServer
// for forward compatibility.
//
// HarborAPI defines the interface between consensus and execution clients
// This is similar to Ethereum's ENGINE API, providing a standardized way for the
// consensus layer to communicate with the execution layer
type HarborAPIServer interface {
	// CreateBlock instructs the execution client to create a new block from its transaction pool
	CreateBlock(context.Context, *BlockCreationRequest) (*BlockCreationResponse, error)
	// ValidateBlock validates a block and its transactions
	ValidateBlock(context.Context, *BlockValidationRequest) (*ValidationResult, error)
	mustEmbedUnimplementedHarborAPIServer()
}

// UnimplementedHarborAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHarborAPIServer struct{}

func (UnimplementedHarborAPIServer) CreateBlock(context.Context, *BlockCreationRequest) (*BlockCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (UnimplementedHarborAPIServer) ValidateBlock(context.Context, *BlockValidationRequest) (*ValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBlock not implemented")
}
func (UnimplementedHarborAPIServer) mustEmbedUnimplementedHarborAPIServer() {}
func (UnimplementedHarborAPIServer) testEmbeddedByValue()                   {}

// UnsafeHarborAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HarborAPIServer will
// result in compilation errors.
type UnsafeHarborAPIServer interface {
	mustEmbedUnimplementedHarborAPIServer()
}

func RegisterHarborAPIServer(s grpc.ServiceRegistrar, srv HarborAPIServer) {
	// If the following call pancis, it indicates UnimplementedHarborAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HarborAPI_ServiceDesc, srv)
}

func _HarborAPI_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarborAPIServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HarborAPI_CreateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarborAPIServer).CreateBlock(ctx, req.(*BlockCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HarborAPI_ValidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarborAPIServer).ValidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HarborAPI_ValidateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarborAPIServer).ValidateBlock(ctx, req.(*BlockValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HarborAPI_ServiceDesc is the grpc.ServiceDesc for HarborAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HarborAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.harbor.HarborAPI",
	HandlerType: (*HarborAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlock",
			Handler:    _HarborAPI_CreateBlock_Handler,
		},
		{
			MethodName: "ValidateBlock",
			Handler:    _HarborAPI_ValidateBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/harbor/api.proto",
}
